// Copyright 2019 Tricot Inc.
// Use of this source code is governed by the license in the LICENSE file.

// Package cmake implements the conversion of Bazel BUILD files to CMake CMakeLists.txt files.
package cmake

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"

	"bazel2cmake/bazel"
	"bazel2cmake/bazel/builtins/rules"
	"bazel2cmake/bazel/core"
)

func toDashes(s string) string {
	return strings.ReplaceAll(s, "/", "-")
}

func dashJoin(parts ...string) string {
	return strings.Join(parts, "-")
}

type CmakeConverter struct {
	// MinimumVersion is the minimum CMake version (e.g., "3.10.0").
	MinimumVersion string

	// ProjectPrefix is the prefix to prepend (not including separating '-') to all project
	// names (it is also the name of the root project). If empty, the workspace name will be
	// used.
	ProjectPrefix string

	// CcLibraryName is the CMake name to use for cc_library targets. If empty,
	// "bazel2cmake_cc_library" will be used.
	CcLibraryName string

	// CcBinaryName is the CMake name to use for cc_binary targets. If empty,
	// "bazel2cmake_cc_binary" will be used.
	CcBinaryName string

	// CcTestName is the CMake name to use for cc_test targets. If empty, "bazel2cmake_cc_test"
	// will be used.
	CcTestName string

	// Includes are the includes for CMakeLists.txt files. If nil, "Bazel2cmakeSupport" will be
	// included.
	Includes []string

	// ExternalTargets are external targets that may appear as dependencies; it is a map from
	// label to CMake target name.
	ExternalTargets map[string]string

	build         *bazel.Build
}

func (self *CmakeConverter) Init(build *bazel.Build) error {
	self.build = build
	if self.ProjectPrefix == "" {
		if build.WorkspaceName != "" {
			self.ProjectPrefix = string(build.WorkspaceName)
		} else {
			self.ProjectPrefix = "bazel2cmake_project"
		}
	}
	if self.CcLibraryName == "" {
		self.CcLibraryName = "bazel2cmake_cc_library"
	}
	if self.CcBinaryName == "" {
		self.CcBinaryName = "bazel2cmake_cc_binary"
	}
	if self.CcTestName == "" {
		self.CcTestName = "bazel2cmake_cc_test"
	}
	if self.Includes == nil {
		self.Includes = []string{"Bazel2cmakeSupport"}
	}
	return nil
}

func (self *CmakeConverter) targetName(l core.Label) (string, error) {
	if !l.IsExternal() {
		return dashJoin(self.ProjectPrefix, toDashes(string(l.Package)),
			toDashes(string(l.Target))), nil
	}
	if rv, ok := self.ExternalTargets[l.String()]; ok {
		return rv, nil
	}

	return fmt.Sprintf("# TODO (external dep): %v", l), nil
}

// TODO(vtl): Remove
func (self *CmakeConverter) targetName2(l core.Label) string {
	if !l.IsExternal() {
		return dashJoin(self.ProjectPrefix, toDashes(string(l.Package)),
			toDashes(string(l.Target)))
	}
	if rv, ok := self.ExternalTargets[l.String()]; ok {
		return rv
	}

	return fmt.Sprintf("# TODO (external dep): %v", l)
}

func (self *CmakeConverter) writeNonRootHeader(packageName core.PackageName, w io.Writer) error {
	if _, err := fmt.Fprintf(w, "# Code generated by bazel2cmake. DO NOT EDIT.\n"); err != nil {
		return err
	}

	if _, err := fmt.Fprintf(w, "\ncmake_minimum_required(VERSION %v)\n",
		self.MinimumVersion); err != nil {
		return err
	}

	if len(self.Includes) > 0 {
		if _, err := fmt.Fprintf(w, "\n"); err != nil {
			return err
		}
		for _, inc := range self.Includes {
			if _, err := fmt.Fprintf(w, "include(%v)\n", inc); err != nil {
				return err
			}
		}
	}

	projectName := dashJoin(self.ProjectPrefix, toDashes(string(packageName)))
	if _, err := fmt.Fprintf(w, "\nproject(%v LANGUAGES CXX)\n", projectName); err != nil {
		return err
	}

	return nil
}

func (self *CmakeConverter) writeNonRootBody(targetName core.TargetName, target core.Target,
	w io.Writer) error {

	name, err := self.targetName(target.Label())
	if err != nil {
		return err
	}

	switch target.(type) {
	case *rules.CcLibraryTarget:
		t := target.(*rules.CcLibraryTarget)
		if _, err := fmt.Fprintf(w, "\n%v(\n", self.CcLibraryName); err != nil {
			return err
		}
		if _, err := fmt.Fprintf(w, "    %v\n", name); err != nil {
			return err
		}
		if t.Srcs != nil {
			if _, err := fmt.Fprintf(w, "    SRCS\n"); err != nil {
				return err
			}
			for _, l := range *t.Srcs {
				// Assume that it's just a simple filename, so just use the target
				// part of the label.
				if _, err := fmt.Fprintf(w, "        %v\n",
					string(l.Target)); err != nil {
					return err
				}
			}
		}
		if t.Hdrs != nil {
			if _, err := fmt.Fprintf(w, "    HDRS\n"); err != nil {
				return err
			}
			for _, l := range *t.Hdrs {
				// Assume that it's just a simple filename, so just use the target
				// part of the label.
				if _, err := fmt.Fprintf(w, "        %v\n",
					string(l.Target)); err != nil {
					return err
				}
			}
		}
		if t.Deps != nil {
			if _, err := fmt.Fprintf(w, "    DEPS\n"); err != nil {
				return err
			}
			for _, l := range *t.Deps {
				depName := self.targetName2(l)
				if _, err := fmt.Fprintf(w, "        %v\n", depName); err != nil {
					return err
				}
			}
		}
		if _, err := fmt.Fprintf(w, ")\n"); err != nil {
			return err
		}
	case *rules.CcBinaryTarget:
		t := target.(*rules.CcBinaryTarget)
		if _, err := fmt.Fprintf(w, "\n%v(\n", self.CcBinaryName); err != nil {
			return err
		}
		if _, err := fmt.Fprintf(w, "    %v\n", name); err != nil {
			return err
		}
		if t.Srcs != nil {
			if _, err := fmt.Fprintf(w, "    SRCS\n"); err != nil {
				return err
			}
			for _, l := range *t.Srcs {
				// Assume that it's just a simple filename, so just use the target
				// part of the label.
				if _, err := fmt.Fprintf(w, "        %v\n",
					string(l.Target)); err != nil {
					return err
				}
			}
		}
		if t.Deps != nil {
			if _, err := fmt.Fprintf(w, "    DEPS\n"); err != nil {
				return err
			}
			for _, l := range *t.Deps {
				depName := self.targetName2(l)
				if _, err := fmt.Fprintf(w, "        %v\n", depName); err != nil {
					return err
				}
			}
		}
		if _, err := fmt.Fprintf(w, ")\n"); err != nil {
			return err
		}
	case *rules.CcTestTarget:
		t := target.(*rules.CcTestTarget)
		if _, err := fmt.Fprintf(w, "\n%v(\n", self.CcTestName); err != nil {
			return err
		}
		if _, err := fmt.Fprintf(w, "    %v\n", name); err != nil {
			return err
		}
		if t.Srcs != nil {
			if _, err := fmt.Fprintf(w, "    SRCS\n"); err != nil {
				return err
			}
			for _, l := range *t.Srcs {
				// Assume that it's just a simple filename, so just use the target
				// part of the label.
				if _, err := fmt.Fprintf(w, "        %v\n",
					string(l.Target)); err != nil {
					return err
				}
			}
		}
		if t.Deps != nil {
			if _, err := fmt.Fprintf(w, "    DEPS\n"); err != nil {
				return err
			}
			for _, l := range *t.Deps {
				depName := self.targetName2(l)
				if _, err := fmt.Fprintf(w, "        %v\n", depName); err != nil {
					return err
				}
			}
		}
		if _, err := fmt.Fprintf(w, ")\n"); err != nil {
			return err
		}
	}

	return nil
}

func (self *CmakeConverter) writeNonRootTrailer(packageName core.PackageName, w io.Writer) error {
	// Nothing currently.
	return nil
}

func (self *CmakeConverter) writeNonRootCmakeLists(packageName core.PackageName,
	packageTargets *core.PackageTargets, packagePath string) error {

	outputPath := filepath.Join(packagePath, "CMakeLists.txt")
	f, err := os.OpenFile(outputPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	if err := self.writeNonRootHeader(packageName, f); err != nil {
		return err
	}

	for _, target := range packageTargets.TargetList {
		if err := self.writeNonRootBody(target.Label().Target, target, f); err != nil {
			return err
		}
	}

	if err := self.writeNonRootTrailer(packageName, f); err != nil {
		return err
	}

	return nil
}

func (self *CmakeConverter) writeCmakeLists(packageName core.PackageName,
	packageTargets *core.PackageTargets, packagePath string) error {

	if packageName == "" {
		// TODO(vtl)
		return self.writeNonRootCmakeLists(packageName, packageTargets, packagePath)
	} else {
		return self.writeNonRootCmakeLists(packageName, packageTargets, packagePath)
	}
}

func (self *CmakeConverter) Convert(outputPath string) error {
	workspaceTargets, ok := self.build.BuildTargets[core.MainWorkspaceName]
	if !ok {
		return fmt.Errorf("no targets in the main workspace")
	}

	for packageName, packageTargets := range workspaceTargets {
		packagePath := filepath.Join(outputPath, string(packageName))
		if err := os.MkdirAll(packagePath, os.ModePerm); err != nil {
			return err
		}

		// TODO(vtl): We should do something else for the "root" package.
		if err := self.writeCmakeLists(packageName, packageTargets,
			packagePath); err != nil {
			return err
		}
	}

	return nil
}
